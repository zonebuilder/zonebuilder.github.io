/*
	JWL - The JavaScript Widget Library version 0.5 testing
	Copyright (c) 2016 The Zonebuilder (zone.builder@gmx.com)
	http://sourceforge.net/projects/jwl-library/
	Licenses: GNU GPL2 or later; GNU LGPLv3 or later (http://sourceforge.net/p/jwl-library/wiki/License/)
 */
/**
	@fileOverview	The JavaScript Widget Library (JWL) is a tool that allows you to build modern web applications by providing a simple way to create HTML components.
	 JWL is based on JUL - The JavaScript UI Language module and it easily integrates with JUL Designer.
*/
/* jshint browser: true, curly: true, eqeqeq: true, evil: true, expr: true, funcscope: true, immed: true, latedef: true, loopfunc: true,  
	onevar: true, newcap: true, noarg: true, node: true, strict: true, trailing: true, undef: true, unused: vars, wsh: true */
/* globals JUL, JWL: true */

(function() {
'use strict';

/* generated by JCS version 1.2 */

/**
	JWL global namespace
	@namespace	It holds properties and methods used by JWL
	@name	JWL
*/
JUL.ns('JWL');

JUL.apply(JWL, /** @lends JWL */ {
	/**
		JWL parser configuration
		@type	Object
	*/
	parserConfig: {
		/**
			Default class of the parser - HTML elements
			@type	String
		*/
		defaultClass: 'html',
		 /**
			Order of component creation - parent before children
			@type	Boolean
		*/
		topDown: true,
		 /**
			The parser will use tha tag property to differentiate between components
			@type	Boolean
		*/
		useTags: true,
		 /**
			Special component factory that will do further processing compared to JUL.UI.createDom():
			<ul>
			  <li>if the config object is not a JWL component, return JUL.UI.createDom(oConfig)</li>
			  <li>call config/component pre-create callback with parent's scope</li>
			  <li>distribute dotted attributes 'objectID.attribute' among descendants</li>
			  <li>create element and recursively process its children</li>
			  <li>call config/component post-create callback with element's scope</li>
			</ul>
			@param	{Object}	oConfig	Configuration object
			@returns	{Object}	Element instance
		*/
		customFactory: function(oConfig) {
			var oComponent = JWL.components[oConfig[this.tagProperty]];
			if (!oComponent) { return this.createDom(oConfig); }
			var fPreCreate = oConfig.preCreate || oComponent.preCreate;
			if (fPreCreate) { fPreCreate = JUL.get(fPreCreate); }
			if (fPreCreate) { oConfig.preCreate = fPreCreate; }
			var fPostCreate = oConfig.postCreate || oComponent.postCreate;
			if (fPostCreate) { fPostCreate = JUL.get(fPostCreate); }
			if (fPostCreate) { oConfig.postCreate = fPostCreate; }
			if (oComponent.ui) { oConfig[this.tagProperty] = oComponent.ui[this.tagProperty]; }
			if (typeof fPreCreate === 'function') {
				var bReturn = fPreCreate.call(oConfig[this.parentProperty],  oConfig, this);
				if (bReturn === false) { return null; }
			}
			var oInit = oConfig;
			oConfig = JUL.apply({}, oConfig);
			delete oConfig.preCreate;
			delete oConfig.postCreate;
			var oLogic = {};
			var sBinding = oComponent.ui ? oComponent.ui[this.bindingProperty] : '.component';
			if (!oComponent.ui) { oConfig[this.bindingProperty] = sBinding; }
			var oRootLogic = {};
			oLogic[sBinding] = oRootLogic;
			var sItem, nDot;
			for (sItem in oConfig) {
				if (oConfig.hasOwnProperty(sItem)) {
					 nDot = sItem.indexOf('.', 1);
					if (nDot > 0 && nDot < sItem.length - 1) {
						sBinding = sItem.slice(0, nDot);
						oLogic[sBinding] = oLogic[sBinding] || {};
						oLogic[sBinding][sItem.substr(nDot + 1)] = oConfig[sItem];
						delete oConfig[sItem];
					}
				}
			}
			var oListeners = oConfig.listeners || {};
			delete oConfig.listeners;
			oRootLogic.listeners = oListeners;
			for (sItem in oListeners) {
				if (oListeners.hasOwnProperty(sItem)) {
					 nDot = sItem.indexOf('.', 1);
					if (nDot > 0 && nDot < sItem.length - 1) {
						sBinding = sItem.slice(0, nDot);
						oLogic[sBinding] = oLogic[sBinding] || {};
						oLogic[sBinding].listeners = oLogic[sBinding].listeners || {};
						oLogic[sBinding].listeners[sItem.substr(nDot + 1)] = oListeners[sItem];
						delete oListeners[sItem];
					}
				}
			}
			for (sItem in oConfig) {
				if (oConfig.hasOwnProperty(sItem) &&
					[this.classProperty, this.tagProperty,  this.idProperty, this.bindingProperty, this.parentProperty, this.cssProperty].indexOf(sItem) < 0) {
					oRootLogic[sItem] = oConfig[sItem];
					delete oConfig[sItem];
				}
			}
			if (oComponent.ui) { oConfig[this.includeProperty] = oComponent.ui; }
			if (oComponent.logic) { oLogic[this.includeProperty] = oComponent.logic; }
			var oWidget = this.create(oConfig, oLogic, oConfig.parent);
			if (typeof fPostCreate === 'function') { fPostCreate.call(oWidget, oInit, this); }
			return oWidget;
		},
		/**
			Use JSON prefixes when serializing objects
			@type	Boolean
			@private
		*/
		_usePrefixes: true,
		 /**
			Special merging callback for parser's include() method that will do further processing compared to JUL.apply():
			<ul>
			  <li>if the object is not a component (binding ID doesn't start with a dot), call JUL.apply(oData, oApply)</li>
			  <li>attach object's listeners in cascade</li>
			  <li>append object's CSS class</li>
			  <li>call JUL.apply() on the other memebers</li>
			</ul>
			@param	{Object}	oData	Target object
			@param	{Object}	oApply	Appended object
			@param	{Boolean}	[bSkip]	For internal use, to process component's logic
			@returns	{Object}	Target object with the resulting members
			@private
		*/
		_includeMerger: function(oData, oApply, bSkip) {
			var oListeners = oData.listeners;
			var sItem;
			if (bSkip) {
				JUL.apply(oData, oApply);
			}
			else {
				for (sItem in oApply) {
					if (oApply.hasOwnProperty(sItem)) {
						if (sItem.substr(0, 1) === '.' && sItem.length > 1 && JUL.typeOf(oApply[sItem]) === 'Object' &&
							oData[sItem] && JUL.typeOf(oData[sItem]) === 'Object') { this._includeMerger(oData[sItem], oApply[sItem], true); }
						else {
							if (sItem === this.cssProperty) { oData[sItem] = oApply[sItem] + (oData[sItem] ? ' ' + oData[sItem] : ''); }
							else { oData[sItem] = oApply[sItem]; }
						}
					}
				}
			}
			if (!oListeners || !oApply.listeners) { return oData; }
			for (sItem in oApply.listeners) {
				if (oApply.listeners.hasOwnProperty(sItem)) {
					if (sItem !== 'scope' && oListeners[sItem]) {
						oListeners[sItem] = [].concat(oListeners[sItem], oApply.listeners[sItem]);
					}
					else {
						oListeners[sItem] = oApply.listeners[sItem];
					}
				}
			}
			oData.listeners = oListeners;
			return oData;
		},
		/**
			Callback for un-serializing objects. Use it in a safe data environment because of eval().
			@param	{String}	sKey	Current member key
			@param	{Mixed}	oValue	Current member value
			@returns	{Mixed}	Member's processed value
			@private
		*/
		_jsonReviver: function(sKey, oValue) {
			if (sKey && typeof oValue === 'string') {
				var bPrefix = false;
				for (var sItem in this._jsonPrefixes) {
					if (this._jsonPrefixes.hasOwnProperty(sItem) &&
						oValue.substr(0, this._jsonPrefixes[sItem].length) === this._jsonPrefixes[sItem]) {
						bPrefix = true;
						oValue = oValue.substr(this._jsonPrefixes[sItem].length).replace(/^\s+/, '');
						break;
					}
				}
				if (bPrefix) {
					try {
						return eval('(function(){return ' + oValue + '})()');
					}
					catch(e) {
						return oValue;
					}
				}
			}
			return oValue;
		}
	},
	/**
		Default prefix for custom element tags
		@type	String
	*/
	registerPrefix: 'jwl',
	/**
		JWL version
		@type	String
	*/
	version: '0.5',
	/**
		Callback to be used as custom factory when generating elemnt wrappers
		@param	{Object}	oConfig	Configuration object
		@returns	{Object}	Element wrapper instance
	*/
	factory: function(oConfig) {
		var oParser = JWL.parser;
		var sName = oConfig[oParser.tagProperty];
		var sTag = sName[0].toUpperCase() + sName.substr(1);
		if (typeof JWL[sTag] !== 'function') { JWL.makeClass(sName); }
		var oListeners = oConfig.listeners;
		delete oConfig.listeners;
		var oWidget = new JWL[sTag](oConfig);
		if (!oWidget || !oListeners || typeof oListeners !== 'object') { return oWidget; }
		var oAdd = {listeners: JUL.apply({scope: oWidget}, oListeners)};
		oAdd[oParser.classProperty] = oConfig[oParser.classProperty];
		oAdd[oParser.tagProperty] = sName;
		oParser.createDom(oAdd, oWidget.el());
		return oWidget;
	},
	/**
		Loads component(s) from a string serialization
		@param	{String}	sData	Parameter description
		@param	{String}	[sWhat]	Name of a specific component to load
		@param	{String}	[sRoot]	Dottet path to read the component from the un-serialized object
		@returns	{Object}	Component configuration
	*/
	load: function(sData, sWhat, sRoot) {
		var oData = null;
		try {
			oData = JSON.parse(sData, JUL.makeCaller(this.parser, '_jsonReviver'));
		}
		catch (e) {}
		if (oData && sRoot) { oData = JUL.get(sRoot, oData); }
		if (!oData || typeof oData !== 'object') { return null; }
		return JUL.ns('JWL.components' + (sWhat ? '.' + sWhat : ''), oData);
	},
	/**
		Loads external CSS for a component using XMLHttpRequest
		@param	{String}	sComponent	Component name
		@returns	{Array}	Array of CSS descriptors
	*/
	loadCss: function(sComponent) {
		var oComponent = this.components[sComponent] || {};
		if (!oComponent.css) { return null; }
		this._cssCache = this._cssCache || {};
		if (this._cssCache[sComponent]) { return this._cssCache[sComponent]; }
		var fLoad = function(sUrl) {
			var oHttp;
			try {
				if (typeof window.XMLHttpRequest === 'function') {
					oHttp = new XMLHttpRequest();
					oHttp.open('GET', sUrl, false);
					oHttp.setRequestHeader('Content-Type', 'text/css; charset=UTF-8');
					oHttp.send(null);
					return oHttp.responseText;
				}
				else {
					oHttp = new ActiveXObject('WinHttp.WinHttpRequest.5.1');
					oHttp.Open('GET', sUrl, false);
					oHttp.SetRequestHeader('Content-Type', 'text/css; charset=UTF-8');
					oHttp.Send();
					return oHttp.ResponseText;
				}
			}
			catch (e) {
				return '';
			}
		};
		var aCss = [].concat(oComponent.css);
		for (var i = 0; i < aCss.length; i++) {
			if (typeof aCss[i] !== 'object') { aCss[i] = {style: aCss[i], media: ''}; }
			if (aCss[i].style && aCss[i].style.indexOf(';') < 0) {
				aCss[i].style = fLoad(aCss[i].style);
			}
			if (!aCss[i].style) { aCss.pop(); }
		}
		this._cssCache[sComponent] = aCss;
		return aCss;
	},
	/**
		Creates an element wrapper class for a specific component
		@param	{String}	sName	Component name or existing HTML tag
		@param	{String}	[sNewNS]	Optiobal namespace under to put the class constructor, it defaults to 'JWL.<Name>
		@returns	{Function}	Class constructor
	*/
	makeClass: function(sName, sNewNS) {
		var oComponent = this.components[sName] || {};
		var sTag = oComponent.ui ? oComponent.ui[this.parser.tagProperty] : sName;
		if (typeof JWL._Base_ !== 'function') {
			JWL._Base_ = function() {};
			JUL.apply(JWL._Base_.prototype, {
				get: function(sItem) { return sItem in this ? this[sItem] : this._el[sItem]; },
				set: function(sItem, oValue, bHost) { (bHost || sItem in this ? this : this._el)[sItem] = oValue; },
				el: function() { return this._el; },
				config: function() { return this._config; }
			});
		}
		var fClass = function(oConfig) {
			oConfig = JUL.apply({}, oConfig || {});
			oConfig[JWL.parser.tagProperty] = sName;
			this._config = oConfig;
			this._el = JWL.parser.create(oConfig, null, oConfig[JWL.parser.parentProperty]);
		};
		fClass.prototype = new JWL._Base_();
		fClass.prototype.constructor = fClass;
		this._protoCache = this._protoCache || {};
		var sItem, oProto;
		if (!this._protoCache[sTag]) {
			this._protoCache[sTag] = {attributes: false, baseURI: false, childNodes: false, className: false,  
				dataset: false, firstChild: false, innerHTML: false, lastChild: false, localName: false, 
				namespaceURI: false, nextSibling: false, nodeName: false, nodeType: false, nodeValue: false, 
				ownerDocument: false, parentNode: false, prefix: false, previousSibling : false, style: false, 
				tabIndex: false, tagName: false,
				addEventListener: true, appendChild: true, blur: true, cloneNode: true, 
				compareDocumentPosition: true, dispatchEvent: true, focus: true, getAttribute: true, 
				getAttributeNode: true, getAttributeNodeNS: true, getAttributeNS: true, getBoundingClientRect: true, 
				getElementsByTagName: true, getElementsByTagNameNS: true, hasAttribute: true, hasAttributeNS: true, 
				hasAttributes: true, hasChildNodes: true, insertBefore: true, isDefaultNamespace: true, 
				lookupNamespaceURI: true, lookupPrefix: true, normalize: true, querySelector: true, querySelectorAll: true, 
				releaseCapture: true, removeAttribute: true, removeAttributeNode: true, removeAttributeNS: true, 
				removeChild: true, removeEventListener: true, replaceChild: true, scrollIntoView: true, setAttribute: true, 
				setAttributeNode: true, setAttributeNodeNS: true, setAttributeNS: true, setCapture: true};
			var oFilter = /^[a-z]/;
			oProto = document.createElement(sTag);
			oProto.style.cssText = oProto.style.cssText + ';display:none';
			document.body.appendChild(oProto);
			for (sItem in oProto) {
				if (!oFilter.test(sItem)) { continue; }
				try {
					this._protoCache[sTag][sItem] = typeof oProto[sItem] === 'function';
				}
				catch (e) {}
			}
			document.body.removeChild(oProto);
		}
		oProto = this._protoCache[sTag];
		this._methodCache = this._methodCache || {getter: {}, setter: {}, other: {}};
		for (sItem in oProto) {
			if (oProto.hasOwnProperty(sItem)) {
				if (oProto[sItem]) {
					this._methodCache.other[sItem] = this._methodCache.other[sItem] || (function(sItem) {
						return function() {
							if (!this._el) { return undefined; }
							var aArgs = [].slice.call(arguments);
							for (var i = 0; i < aArgs.length; i++) {
								if (aArgs[i] instanceof JWL._Base_) { aArgs[i] = aArgs[i].el(); }
							}
							return this._el[sItem].apply(this._el, aArgs);
						};
					})(sItem);
					fClass.prototype[sItem] = this._methodCache.other[sItem];
				}
				else {
					this._methodCache.getter[sItem] = this._methodCache.getter[sItem] || (function(sItem) {
						return function() { return this._el ? this._el[sItem] : undefined; };
					})(sItem);
					this._methodCache.setter[sItem] = this._methodCache.setter[sItem] || (function(sItem) {
						return function(oValue) { if (this._el) { this._el[sItem] = oValue; } };
					})(sItem);
					try {
						Object.defineProperty(fClass.prototype, sItem, {
							configurable: true,
							enumerable: true,
							get: this._methodCache.getter[sItem],
							set: this._methodCache.setter[sItem]
						});
					}
					catch (e1) {}
				}
			}
		}
		JUL.apply(fClass.prototype, oComponent.prototype || {});
		JUL.ns(sNewNS || 'JWL.' + sName[0].toUpperCase() + sName.substr(1), fClass);
		return fClass;
	},
	/**
		Registers a JWL component as a custom HTML element (W3C web components)
		@param	{String}	sName	Component name
		@param	{Boolean}	[bDerived]	Set it to true to register derived a custom HTML element
		@param	{String}	[sNewName]	Optional new tag name instead of prepending 'jwl-' to the component name
		@returns	{Function}	Registered element constructor
	*/
	register: function(sName, bDerived, sNewName) {
		var oComponent = this.components[sName] || {};
		this.loadCss(sName);
		var oPrototype = JUL.apply({
			_componentName: sName,
			_derived: bDerived && true,
			el: function() {
				return (this.shadowRoot || this).lastChild;
			},
			createdCallback: function() {
				var oRoot = this;
				if (typeof this.attachShadow === 'function') { oRoot = this.attachShadow(); }
				else if (typeof this.createShadowRoot === 'function') {  oRoot = this.createShadowRoot(); }
				var oComponent = JWL.components[this._componentName] || {};
				if (oComponent.css) {
					var sHtml = '';
					var aCss = JWL.loadCss(this._componentName);
					for (var i = 0; i < aCss.length; i++) {
						sHtml += '<style type="text/css"' + (aCss[i].media ? ' media="' + aCss[i].media + '"' : '')  +
							'>' + aCss[i].style + '<' + '/style>';
					}
					oRoot.innerHTML = sHtml;
				}
			},
			attachedCallback: function() {
				var oRoot = this.shadowRoot || this;
				if (oRoot.childNodes.length && oRoot.lastChild.nodeName.toLowerCase() !== 'style') { return; }
				var oComponent = JWL.components[this._componentName] || {};
				if (!oComponent.ui) { return; }
				var oConfig = {};
				oConfig[JWL.parser.tagProperty] = this._componentName;
				JWL.parser.create(oConfig, null, oRoot);
			}
		}, oComponent.prototype || {});
		var sTag = oComponent.ui ? oComponent.ui[this.parser.tagProperty] : sName;
		if (bDerived) {
			var oEl = document.createElement(sTag);
			oEl.style.cssText = oEl.style.cssText + ';display:none';
			document.body.appendChild(oEl);
			oPrototype = JUL.apply(Object.create(oEl.constructor.prototype), oPrototype);
			oPrototype = JUL.apply(Object.create(HTMLElement.prototype), oPrototype);
			document.body.removeChild(oEl);
		}
		else {
			oPrototype = JUL.apply(Object.create(HTMLElement.prototype), oPrototype);
		}
		return document.registerElement(sNewName || this.registerPrefix + '-' + sName, bDerived ? 
			{'extends': sTag, prototype: oPrototype} : {prototype: oPrototype});
	},
	/**
		Saves component(s) into a JSON serialization
		@param	{String}	[sWhat]	Component to serialize, if omitted all components are saved
		@returns	{String}	JSON string containing serialized component(s)
	*/
	save: function(sWhat) {
		return this.parser.obj2str(sWhat ? this.components[sWhat] : this.components, true);
	},
	/**
		Creates and triggers a custom DOM event
		@param	{Object}	oTarget	Target elment or element wrapper to trigger the event on
		@param	{String}	sEvent	Event name
		@param	{Object}	[oInit]	Hash of additional event properties
		@returns	{Boolean}	The result of dispatching the event to its cascaded listeners
	*/
	trigger: function(oTarget, sEvent, oInit) {
		if (typeof JWL._Base_ === 'function' && oTarget instanceof JWL._Base_) { oTarget = oTarget.el(); }
		oInit = JUL.apply({bubbles: true, cancelable: true}, oInit || {});
		var nSep = sEvent.indexOf(':');
		var sClass = nSep < 0 ? 'Event' : sEvent.slice (0, nSep);
		if (nSep > -1) { sEvent = sEvent.substr(nSep + 1); }
		var oEvent = null;
		if (typeof window[sClass] === 'function') {
				oEvent = new window[sClass](sEvent, oInit);
		}
		else if (typeof document.createEvent === 'function') {
				oEvent = document.createEvent(sClass );
				var aArgs = [sEvent];
				for (var sItem in oInit) {
					if (oInit.hasOwnProperty(sItem)) { aArgs.push(oInit[sItem]); }
				}
				oEvent['init' + sClass].apply(oEvent, aArgs);
		}
		else {
			oEvent = document.createEventObject();
			JUL.apply(oEvent, oInit);
			try {
				return oTarget.fireEvent('on' + sEvent, oEvent);
			}
			catch (e1) { return false; }
		}
		return	oTarget.dispatchEvent(oEvent);
	}
});

JWL.parser = new JUL.UI.Parser(JWL.parserConfig);
JUL.ns('JWL.components');

})();
