/*
	JWL - The JavaScript Widget Library version 0.8.4 testing
	Copyright (c) 2016 - 2017 The Zonebuilder <zone.builder@gmx.com>
	http://sourceforge.net/projects/jwl-library/
	Licenses: GNU GPL2 or later; GNU LGPLv3 or later (http://sourceforge.net/p/jwl-library/wiki/License/)
 */
/* jshint browser: true, curly: true, eqeqeq: true, expr: true, funcscope: true, immed: true, latedef: true, loopfunc: true,  
	onevar: true, newcap: true, noarg: true, node: true, strict: true, trailing: true, undef: true, unused: vars, wsh: true */
/* globals JUL */

(function(global, module) {
'use strict';
if (module && module.exports && typeof require === 'function') { require('jul'); }
var jul = new JUL.Instance({nsRoot: module && module.exports ? {JWL: module.exports} : global || null});
var JWL = jul.ns('JWL');

/* generated by JCS version 1.3.6 */

/**
	General purpose player bar
	@namespace	JWL.components.playerbar namespace
	@name	JWL.components.playerbar
*/
jul.ns('JWL.components.playerbar');

jul.apply(jul.get('JWL.components.playerbar'), /** @lends JWL.components.playerbar */ {
	/**
		Component prototype members
		@type	Object
	*/
	prototype: {
		/**
			Updates the display of the player bar controls
			@param	{Boolean}	[bPause]	Set it to true to show a paused playing
		*/
		showPlay: function(bPause) {
			var oPlay = JWL.get(this).querySelector( '.playerbar-play');
			var sClass = oPlay.getAttribute('class');
			oPlay.setAttribute('class', sClass.replace(bPause ? 'fa-play' : 'fa-pause', bPause ? 'fa-pause' : 'fa-play'));
			oPlay.setAttribute('title', bPause ? 'Pause' : 'Play');
		}
	},
	/**
		Array of internal/external CSS for registering the custom element
		@type	Array|String
	*/
	css: ['../../assets/examples/lib/faws/css/font-awesome.min.css?v=0.8.4',
	 '../../assets/examples/lib/jwl/css/playerbar.css?v=0.8.4']
});

})(typeof global !== 'undefined' ? global : window, typeof module !== 'undefined' ? module : null);


(function(global, module) {
'use strict';
if (module && module.exports && typeof require === 'function') { require('jul'); }
var jul = new JUL.Instance({nsRoot: module && module.exports ? {JWL: module.exports} : global || null});
var JWL = jul.ns('JWL');

/* generated by JCS version 1.3.6 */

/**
	Options object stored as JSON
	@namespace	JWL.components.jsonoptions namespace
	@name	JWL.components.jsonoptions
*/
jul.ns('JWL.components.jsonoptions');

jul.apply(jul.get('JWL.components.jsonoptions'), /** @lends JWL.components.jsonoptions */ {
	/**
		Component prototype members
		@type	Object
	*/
	prototype: {
		/**
			Toggles the display of options editing
			@param	{Boolean}	[bHide]	Set it to true to force hiding
		*/
		showOptions: function(bHide) {
			var oOpts = JWL.get(this).querySelector('.jsonoptions-opts');
			var sClass = oOpts.getAttribute('class') || '';
			if (bHide || sClass.indexOf('shown') > -1) {
				oOpts.setAttribute('class', sClass.replace('shown', ''));
		}
		else {
			var sJson = this.getAttribute('data-options') || '';
			try { sJson = JUL.UI.obj2str(JSON.parse(sJson), true); } catch (e) {}
			JWL.get(this).querySelector('.jsonoptions-edit').value = sJson;
				oOpts.setAttribute('class', sClass + ' shown');
			}
		},
		/**
			Saves the edited options
		*/
		saveOptions: function() {
				var sJson = JUL.trim(JWL.get(this).querySelector('.jsonoptions-edit').value);
				if (sJson) {
					try { sJson = JSON.stringify(JSON.parse(sJson)); }
					catch (e) { window.alert('Text must be valid JSON.\n' + (e.description || e.message)); return; }
				}
			this.setAttribute('data-options', sJson);
			JWL.trigger(this, 'optionschanged');
			this.showOptions(true);
		}
	},
	/**
		Array of internal/external CSS for registering the custom element
		@type	Array|String
	*/
	css: ['../../assets/examples/lib/faws/css/font-awesome.min.css?v=0.8.4',
	 '../../assets/examples/lib/jwl/css/jsonoptions.css?v=0.8.4']
});

})(typeof global !== 'undefined' ? global : window, typeof module !== 'undefined' ? module : null);


(function(global, module) {
'use strict';
if (module && module.exports && typeof require === 'function') { require('jul'); }
var jul = new JUL.Instance({nsRoot: module && module.exports ? {JWL: module.exports} : global || null});
var JWL = jul.ns('JWL');

/* generated by JCS version 1.3.6 */

/**
	A player that displays a sequence of pictures
	@namespace	JWL.components.frameplayer namespace
	@name	JWL.components.frameplayer
*/
jul.ns('JWL.components.frameplayer');

jul.apply(jul.get('JWL.components.frameplayer'), /** @lends JWL.components.frameplayer */ {
	/**
		Component pre-creation callback
		@param	{Object}	oConfig	Runtime configuration
		@param	{Object}	oParser	Current parser
	*/
	preCreate: function(oConfig, oParser) {
		var oMap = {
			'data-image-width': '.frameplayer-image.width',
			'data-image-height': '.frameplayer-image.height',
			'data-image-src': '.frameplayer-image.src',
			'data-image-alt': '.frameplayer-image.alt',
			'data-options': '.frameplayer-jsonoptions.data-options'
		};
		var sItem;
		// gather options for custom HTML elements
		var oHost = this ? this.host || this : null;
		if (oHost && oHost._componentName) {
			for (sItem in oMap) {
				if (oMap.hasOwnProperty(sItem)) { oConfig[sItem] = oHost.getAttribute(sItem); }
			}
		}
		// pass the appropriate options to descendants
		for (sItem in oMap) {
			if (oMap.hasOwnProperty(sItem) && oConfig[sItem]) {
				oConfig[oMap[sItem]] = oConfig[sItem];
			}
		}
	},
	/**
		Component prototype members
		@type	Object
	*/
	prototype: {
		/**
			Timer instance
			@type	Object
		*/
		cron: null, /**
			Current frame
			@type	Number
		*/
		current: -1,
		 /**
			Goes to the last frame
		*/
		gotoEnd: function() {
			this.current = 1e9;
			this.play();
			this.pause();
			this.showStop();
		},
		/**
			Goes to the first frame
		*/
		gotoStart: function() {
			this.current = -1;
			this.play();
			this.pause();
			this.showStop();
		},
		/**
			Pauses the playback
		*/
		pause: function() {
			if (this.cron) { clearTimeout(this.cron); }
			this.cron = null;
		},
		/**
			Plays the sequence starting from the current frame
		*/
		play: function() {
			var oOpts = JWL.get(this).querySelector('.jwl-jsonoptions').getAttribute('data-options') || '';
			try { oOpts = JSON.parse(oOpts); } catch (e) {}
			oOpts = JUL.apply({
				template: 'frame.jpg',
				range: [0, 0],
				interval: 1000
			}, oOpts || {});
			if (this.current < oOpts.range[0]) { this.current = oOpts.range[0]; }
			if (this.current > oOpts.range[1]) { this.current = oOpts.range[1]; }
			var nVal = oOpts.zeropad ? (parseFloat('1e' + oOpts.range[1].toString().length) + this.current).toString().substr(1) : this.current;
			var oImg = JWL.get(this).querySelector('.frameplayer-image' );
			var sSrc = oOpts.template.replace('{n}', nVal);
			oImg.setAttribute('src', sSrc);
			oImg.setAttribute('alt', sSrc.split('/').pop().split('.')[0]);
			this.current++;
			var oThis = this;
			if (this.cron) { clearTimeout(this.cron); }
			this.cron = setTimeout(this.current > oOpts.range[1] ? 
				function() { oThis.stop(); } : function() { oThis.play(); }, oOpts.interval);
		},
		/**
			Syncs the display of the player with the stop state
		*/
		showStop: function() {
			JWL.get(this).querySelector('.jwl-playerbar').showPlay();
		},
		/**
			Displays the previous frame
		*/
		stepBackward: function() {
			this.current -= 2;
			this.play();
			this.pause();
			this.showStop();
		},
		/**
			Displays the next frame
		*/
		stepForward: function() {
			this.play();
			this.pause();
			this.showStop();
		},
		/**
			Stops the playback
		*/
		stop: function() {
			this.pause();
			this.current = -1;
			this.showStop();
			var oImg = JWL.get(this).querySelector('.frameplayer-image');
			oImg.setAttribute('src', this.getAttribute('data-image-src'));
			oImg.setAttribute('alt', this.getAttribute('data-image-alt'));
		}
	},
	/**
		Array of internal/external CSS for registering the custom element
		@type	Array|String
	*/
	css: '../../assets/examples/lib/jwl/css/frameplayer.css?v=0.8.4'
});

})(typeof global !== 'undefined' ? global : window, typeof module !== 'undefined' ? module : null);


