(function(global, module) {
'use strict';
if (module && module.exports && typeof require === 'function') { require('jul'); }

/* if in Node, export the instance factory, else apply it to the global namespace  */
var fInstance = function(oNSRoot) {
/* create a JUL instance bound to oNSRoot and make it available to the inner code */
var jul = new JUL.Instance({nsRoot: oNSRoot || global});

/* generated by JUL Designer version 2.1.1 */
/* 'JUL Comment System - Open dialog' namespace */
var oProject = jul.ns('JUL.Comments.open');

jul.apply(oProject,
/* begin 'JUL Comment System - Open dialog' */
{
	keepBindings: false,
	listenersProperty: 'listeners',
	noLogic: false,
	ns: 'JUL.Comments.open',
	suggestedFramework: 'xul',
	title: 'JUL Comment System - Open dialog',
	version: '1.1502694564874',
	init: function () {
		this.parser = new jul.ui.Parser(this.parserConfig);
		this.dialog = this.parser.create(this.ui, this.logic);
		if (this.dialog) {
			ample.documentElement.appendChild(this.dialog);
			this.dialog.showModal();
		}
	}
}
/* end 'JUL Comment System - Open dialog' */
);

oProject.parserConfig =
/* begin 'JUL Comment System - Open dialog' parser config */
{
	customFactory: 'JUL.UI.createDom',
	defaultClass: 'xul',
	topDown: true,
	useTags: true
}
/* end 'JUL Comment System - Open dialog' parser config */
;

oProject.ui =
/* begin 'JUL Comment System - Open dialog' UI */
{
	tag: 'dialog',
	id: 'dialog-open',
	height: 410,
	hidden: true,
	title: 'Open',
	width: 800,
	children: [
		{tag: 'grid', id: 'grid-settings', children: [
			{tag: 'columns', children: [
				{tag: 'column', flex: 2},
				{tag: 'column', flex: 3}
			]},
			{tag: 'rows'}
		]}
	]
}
/* end 'JUL Comment System - Open dialog' UI */
;

oProject.logic =
/* begin 'JUL Comment System - Open dialog' logic */
{
	'dialog-open': {
		listeners: {
			dialogaccept: function () {
				JUL.Comments.project.onOpen();
				return false;
			}
		}
	}
}
/* end 'JUL Comment System - Open dialog' logic */
;


};

if (module && module.exports) {
	module.exports = fInstance;
}
else if (global) {
	fInstance(global);
}
return fInstance;

})(typeof global !== 'undefined' ? global : window, (typeof window === 'undefined' || !window.module) && typeof module !== 'undefined' ? module : null);
