(function(global, module) {
'use strict';
if (module && module.exports && typeof require === 'function') { require('jul'); }

/* if in Node, export the instance factory, else apply it to the global namespace  */
var fInstance = function(oNSRoot) {
/* create a JUL instance bound to oNSRoot and make it available to the inner code */
var jul = new JUL.Instance({nsRoot: oNSRoot || global});

/* generated by JUL Designer version 2.1.1 */
/* 'JUL Comment System' namespace */
var oApp = jul.ns('JUL.Comments');

jul.apply(oApp,
/* begin 'JUL Comment System' */
{
	ns: 'JUL.Comments',
	preferredFramework: 'xul',
	title: 'JUL Comment System',
	version: '1.1502961404562',
	init: function () {
		for (var sItem in this.modules) {
			if (this.modules.hasOwnProperty(sItem)) {
				var sNS = this.modules[sItem].ns;
				if (sNS.substr(0, 1) === '.') { sNS = this.ns + sNS; }
				var oModule = jul.get(sNS);
				if (!oModule) { continue; }
				oModule.app = this;
				oModule.parser = new jul.ui.Parser(this.defaultParser);
				oModule.parser.module = oModule;
				var oPanel = oModule.parser.create(oModule.ui, oModule.logic);
				if (oPanel) { ample.documentElement.appendChild(oPanel); }
			}
		}
		//this.onInit();
	},
	modules: {
		project: {
			ns: '.project', description: 'Main page'
		},
		edit: {
			ns: '.edit', description: 'Edit dialog'
		},
		browse: {
			ns: '.browse', description: 'Browse dialog'
		},
		open: {
			ns: '.open', description: 'Open dialog'
		}
	}
}
/* end 'JUL Comment System' */
);

oApp.defaultParser =
/* begin 'JUL Comment System' default parser */
{
	defaultClass: 'xul',
	topDown: true,
	useTags: true,
	customFactory: function (oConfig) {
		if (oConfig.listeners) { oConfig.listeners.scope = this.module; }
		return this.createDom(oConfig);
	}
}
/* end 'JUL Comment System' default parser */
;


};

if (module && module.exports) {
	module.exports = fInstance;
}
else if (global) {
	fInstance(global);
}
return fInstance;

})(typeof global !== 'undefined' ? global : window, typeof module !== 'undefined' ? module : null);
