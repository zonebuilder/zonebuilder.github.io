(function(global, module) {
'use strict';

/* if in Node, export the instance factory, else apply it to the global namespace  */
var fInstance = function(oNSRoot) {
/* create a JUL instance bound to oNSRoot and make it available to the inner code */
var jul = new JUL.Instance({nsRoot: oNSRoot || global});

/* generated by JUL Designer version 2.1 */
/* 'JWL Components - Options object stored as JSON' namespace */
var oProject = jul.ns('JWL.components.jsonoptions');

jul.apply(oProject,
/* begin 'JWL Components - Options object stored as JSON' */
{
	keepBindings: true,
	listenersProperty: 'listeners',
	noLogic: false,
	ns: 'JWL.components.jsonoptions',
	suggestedFramework: 'html',
	title: 'JWL Components - Options object stored as JSON',
	version: '1.1500456715166',
	init: function () {
		JWL.parser._keepInstance = true;
		JWL.parser.create(this.ui, this.logic, document.body);
	}
}
/* end 'JWL Components - Options object stored as JSON' */
);

oProject.parserConfig =
/* begin 'JWL Components - Options object stored as JSON' parser config */
{
	customFactory: 'JUL.UI.createDom',
	defaultClass: 'html',
	topDown: true,
	useTags: true
}
/* end 'JWL Components - Options object stored as JSON' parser config */
;

oProject.ui =
/* begin 'JWL Components - Options object stored as JSON' UI */
{
	tag: 'div',
	cid: '.jsonoptions',
	css: 'jsonoptions',
	children: [
		{tag: 'a', cid: '.jsonoptions-show', css: 'fa fa-gear', href: '#', title: 'Options'},
		{tag: 'div', css: 'jsonoptions-opts-wrap', children: [
			{tag: 'div', css: 'jsonoptions-opts', children: [
				{tag: 'textarea', cid: '.jsonoptions-edit', cols: '30', css: 'jsonoptions-edit', rows: '10', wrap: 'off'},
				{tag: 'div', css: 'jsonoptions-buttons', children: [
					{tag: 'button', cid: '.jsonoptions-ok', html: 'OK'},
					{tag: 'button', cid: '.jsonoptions-cancel', html: 'Cancel'}
				]}
			]}
		]}
	]
}
/* end 'JWL Components - Options object stored as JSON' UI */
;

oProject.logic =
/* begin 'JWL Components - Options object stored as JSON' logic */
{
	'.jsonoptions': {
		'data-options': '', listeners: {
			saveoptions: function () {
				this.saveOptions();
			},
			toggleoptions: function () {
				this.showOptions();
			}
		}
	},
	'.jsonoptions-cancel': {
		listeners: {
			click: function () {
				JWL.trigger(this, 'toggleoptions');
			}
		}
	},
	'.jsonoptions-ok': {
		listeners: {
			click: function () {
				JWL.trigger(this, 'saveoptions');
			}
		}
	},
	'.jsonoptions-show': {
		listeners: {
			click: function (oEvent) {
				oEvent = oEvent || event;	
				try { oEvent.preventDefault(); } catch(e) {}
				JWL.trigger(this, 'toggleoptions');
				return false;
			}
		}
	}
}
/* end 'JWL Components - Options object stored as JSON' logic */
;


};

if (module && module.exports) {
	module.exports = fInstance;
}
else if (global) {
	fInstance(global);
}
return fInstance;

})(typeof global !== 'undefined' ? global : window, typeof module !== 'undefined' ? module : null);
